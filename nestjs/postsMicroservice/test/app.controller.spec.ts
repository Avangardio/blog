import { Test, TestingModule } from '@nestjs/testing';
import { AppController } from '@/app.controller';
import { AppModule } from '@/app.module';
import { CreatePostBodyDto } from '@/DTO/posts/createPost';
import { NoUserError } from "@/Errors/postgresErrors/postgresErrors";

describe('AppController', () => {
  let appController: AppController;

  beforeEach(async () => {
    const app: TestingModule = await Test.createTestingModule({
      imports: [AppModule],
    }).compile();
    appController = app.get<AppController>(AppController);
  });

  describe('–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –ø–æ—Å—Ç–æ–≤', () => {
    it('[NEST] - –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å ‚úÖ', async () => {
      const createPostBody: CreatePostBodyDto = {
        userId: 1,
        newPostData: {
          title: '–ù—É —Ç–∏–ø–∞ —Ç–∞–π—Ç–ª',
          description: '–≠–ô–ô–ô, –ù–ï –ó–ê–°–õ–û–ù–Ø–ô –ú–ù–ï –°–û–õ–ù–¶–ï',
          texts: '–ù—É –∑–¥–µ—Å—å —Ç–µ—Å—Ç–æ–≤–æ–π –¥–∞—Ç—ã –æ–æ–æ—á–µ–Ω—å –º–Ω–æ–≥–æ, –Ω–æ –º–∞–ª–æ....',
          tags: ['ANIME'],
        },
      };
      const response = await appController.createNewPost(createPostBody);
      expect(response.code).toBe(201);
      expect(response.payload?.postId > 0).toBeTruthy();
    });
    it('[NEST] - –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç üêí', async () => {
      const createPostBody: CreatePostBodyDto = {
        userId: 612723930,
        newPostData: {
          title: '–ù—É —Ç–∏–ø–∞ —Ç–∞–π—Ç–ª',
          description: '–≠–ô–ô–ô, –ù–ï –ó–ê–°–õ–û–ù–Ø–ô –ú–ù–ï –°–û–õ–ù–¶–ï',
          texts: '–ù—É –∑–¥–µ—Å—å —Ç–µ—Å—Ç–æ–≤–æ–π –¥–∞—Ç—ã –æ–æ–æ—á–µ–Ω—å –º–Ω–æ–≥–æ, –Ω–æ –º–∞–ª–æ....',
          tags: ['ANIME'],
        },
      };
      await expect( appController.createNewPost(createPostBody)).rejects.toThrowError('NO_USER');
    });
  });
});
